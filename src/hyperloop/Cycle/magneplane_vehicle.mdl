//
// magneplane model for PyCycle Verification
///

//------------------------------------------------------------------------
//                           Output Data Viewers
//------------------------------------------------------------------------
setThermoPackage( "Janaf" );

#include <../Cycle/area.view_page> //path defined this way for the wrapper

real C_IN2toM2 = 144.*(3.28084**2.);
real HPtoKW = 0.7457;
real tubeLen = 563270.0; // 350 miles in meters
real teslaPack = 90.0; // kw-hours

page {
   SimpleBlock areas {

      body =
         "FLOW  \n" +
         "Reynolds:???????.??? -/grid unit    Fan SPR:????.???    Fan MFR:????.??? kg/s   Plenum TPR:????.???     Plenum TTR:????.???  \n\n" +

         "POWER  \n" +
         "Compressor:  ????.??? hp \n" +
         "No. of 90Kwh Tesla Batteries: ???.???";

      vars = {
         //Flow
         "(start.Fl_O.rhos*start.Fl_O.V/start.Fl_O.mus)/0.3048",
         "inlet.Fl_O.Ps/start.Fl_O.Ps",
         "inlet.Fl_O.W*0.453592",
         "intDuct.Fl_O.Pt/start.Fl_O.Ps",
         "intDuct.Fl_O.Tt/start.Fl_O.Ts",
         //Power
         "-cmp25.pwr",
         "cmp25.batteries" }
   }
   inputs.bottom = "areas";
}

//------------------------------------------------------------------------
//                           NPSS Model
//------------------------------------------------------------------------

real vehicleMach = 0.8;
real cmpMach = 0.65;
real PsTube = 0.123694;  // 75000 ft std alt pressure
real TsTube = 524.099277;     // degR
real Atube, Dtube, AtubeB, AtubeC, AbypassExit, AnozzExit;
real Apod, Abypass, blockage = 0.90;
real Apax, Adiff, Acmprssd;
real g;

// start -> inlet --> compressor --> duct  ---> nozzle ---> end

Element FlowStart start {   //tube start
   W = 10.0;

   Pt = PsTube * ( 1 + (g-1)/2.0*vehicleMach**2 )**(g/(g-1)); // psi
   Tt = TsTube * ( 1 + (g-1)/2.0*vehicleMach**2 );            // degR

   void preexecute() {
      g = Fl_O.gamt;
      Fl_O.MN = vehicleMach;
   }
}


Element Inlet inlet {
   PqP_in = 0.99; // recovery

   void preexecute() {
      Fl_O.MN = cmpMach;
      if ( cmpMach > vehicleMach ) { Fl_O.MN = vehicleMach; }
   }

   void postexecute() {
      Adiff = Fl_O.Aphy/(3.28084**2.)/(144.);
      Apod  = Fl_O.Aphy/(3.28084**2.)/(144.)/blockage;   // Adiff/blockage
   }
}

Element Compressor cmp25 {
   real batteries;

   PRdes = 6.0;
   effDes = 0.9;

   // in reality this must be slower but the internal duct can accel the flow
   void preexecute() {
      Fl_O.MN = cmpMach;
      if ( cmpMach > vehicleMach ) { Fl_O.MN = vehicleMach; }
   }
   void postexecute(){

      batteries = (-pwr*HPtoKW*(tubeLen/(start.Fl_O.V*0.3048)/3600.0))/teslaPack;
      //cout << "Pod Velocity=                " << start.Fl_O.V*0.3048 << " m/s" << endl;
      //cout << "Trip Time=                " << (tubeLen/(start.Fl_O.V*0.3048)/3600.0) << " hrs" << endl;

   }
}

Element Shaft shaft {
   ShaftInputPort Sh_cmp;
   Nmech = 10000.;
}

Element Duct intDuct {

   void preexecute() {
      Fl_O.MN = cmpMach;
      if ( cmpMach > vehicleMach ) { Fl_O.MN = vehicleMach; }
   }

   void postexecute() {
      Acmprssd = Fl_O.Aphy/(3.28084**2.)/(144.);
      Apax = Adiff - Acmprssd;
   }
}


Element Nozzle nozz {
   switchType = "CONIC";
   PsExhName = "start.Fl_O.Ps";

   void postexecute() {
      AnozzExit = Fl_O.Aphy/(3.28084**2.)/(144.);
   }
}


Element FlowEnd endC {
}

//------------------------------------------------------------------------
//                           Component Linkages
//------------------------------------------------------------------------
linkPorts( "start.Fl_O"      , "inlet.Fl_I"      , "FStubeC"  ) ;
linkPorts( "inlet.Fl_O"     , "cmp25.Fl_I"       , "FSdiffused" ) ;
linkPorts( "cmp25.Fl_O"      , "intDuct.Fl_I"     , "FScompressed" ) ;
linkPorts( "intDuct.Fl_O"    , "nozz.Fl_I"        , "FSintduct" ) ;
linkPorts( "nozz.Fl_O"       , "endC.Fl_I"        , "FSnozzle" ) ;

linkPorts( "cmp25.Sh_O"      , "shaft.Sh_cmp"     , "CMPwork" ) ;


Independent ind_Pt {
   varName = "start.Pt";
   autoSetup = TRUE;
}

Independent ind_Tt {
   varName = "start.Tt";
   autoSetup = TRUE;
}

// Independent ind_W {
//    varName = "start.W";
//    autoSetup = TRUE;
// }



// Dependent dep_Wcmp {
//    eq_rhs = "-cmp25.pwr";
//    eq_lhs = "1000";
//    autoSetup = TRUE;
// }

Dependent dep_Ts {
   eq_rhs = "start.Fl_O.Ts";
   eq_lhs = "TsTube";
   autoSetup = TRUE;
}

Dependent dep_Apod {
   eq_rhs = "Apax"; // "start.Fl_O.Aphy";
   eq_lhs = "1.40"; // "3.618*(3.281**2.)*(144.)";
   autoSetup = TRUE;
}


//------------------------------------------------------------------
//     Run Cases
//------------------------------------------------------------------
setOption( "switchDes", "DESIGN" );
solver.maxJacobians = 500;
solver.maxIterations = 500;

autoSolverSetup();
solver.removeDependent( "shaft.integrate_Nmech" );
run();
page.display();


void printStuff() {
   cout.precision=8;
   cout.showpoint = TRUE;
   cout << " --- Output ------------- " << endl;
   cout << " --- Freestream --------- " << endl;
   cout << "Pod Mach No.=             " << vehicleMach << endl;
   cout << "Ambient Ps=                  " << toStr(PsTube,10) << " psi" << endl;
   cout << "Ambient Ts=                  " << toStr(TsTube,10) << " degR" << endl;
   cout << "Ambient Pt=                  " << toStr(start.Fl_O.Pt,10) << " psi" << endl;
   cout << "Ambient Tt=                  " << toStr(start.Fl_O.Tt,10) << " degR" << endl;
   cout << "Ambient Ds=                  " << start.Fl_O.rhos*16.0185 << " kg/m^3" << endl;
   cout << "Ambient Viscocity=           " << start.Fl_O.mus*1.48816394 << " kg/(m-s)" << endl;
   cout << "Pod Velocity=                " << start.Fl_O.V*0.3048 << " m/s" << endl;
   cout << "Reynolds No.=                " << (start.Fl_O.rhos*start.Fl_O.V)/(start.Fl_O.mus)/0.3048 << " -/grid unit" << endl;

   cout << " --- Fan ---------------- " << endl;
   cout << "Compressor Mach No.=      " << inlet.Fl_O.MN << endl;
   cout << "Compressor Fan Area=      " << start.Fl_O.Aphy*0.00064516 << " m^2" << endl;
   cout << "Compressor Fan Radius=    " << sqrt(start.Fl_O.Aphy*0.00064516/PI) << " m" << endl;
   cout << "Compressor Ps=            " << inlet.Fl_O.Ps << " Pa" << endl;
   cout << "Compressor Ts=            " << inlet.Fl_O.Ts << " degR" << endl;
   cout << "Compressor Pt=            " << inlet.Fl_O.Pt << " Pa" << endl;
   cout << "Compressor Inlet ht=      " << inlet.Fl_O.ht << endl;
   cout << "Compressor Outlet ht=     " << cmp25.Fl_O.ht << endl;
   cout << "Compressor Tt=            " << inlet.Fl_O.Tt << " degR" << endl;
   cout << "Compressor MFR=           " << toStr(inlet.Fl_O.W*0.453592,10) << " kg/s" << endl;
   cout << "Compressor SPR=           " << inlet.Fl_O.Ps/PsTube << " kg/s" << endl;
   cout << "Compressor Power Reqd=    " << -cmp25.pwr << " hp" << endl;

   cout << " --- Nozzle Plenum ------------- " << endl;
   cout << "Nozzle Plenum Area=       " << intDuct.Fl_O.Aphy*0.00064516 << " m^2" << endl;
   cout << "Nozzle Plenum Radius=     " << sqrt(intDuct.Fl_O.Aphy*0.00064516/PI) << " m" << endl;
   cout << "Nozzle Plenum Ps=         " << intDuct.Fl_O.Ps << " psi" << endl;
   cout << "Nozzle Plenum Ts=         " << intDuct.Fl_O.Ts << " degR" << endl;
   cout << "Nozzle Plenum Pt=         " << intDuct.Fl_O.Pt << " psi" << endl;
   cout << "Nozzle Plenum Tt=         " << intDuct.Fl_O.Tt << " degR" << endl;
   cout << "Nozzle Plenum TPR=        " << intDuct.Fl_O.Pt/PsTube << endl;
   cout << "Nozzle Plenum TTR=        " << intDuct.Fl_O.Tt/TsTube << endl;

   cout << " --- Nozzle Exit ------------- " << endl;
   cout << "Nozzle Exit Mach No.=     " << nozz.Fl_O.MN << endl;
   cout << "Nozzle Exit Area=         " << nozz.Fl_O.Aphy*0.00064516 << " m^2" << endl;
   cout << "Nozzle Exit Radius=       " << sqrt(nozz.Fl_O.Aphy*0.00064516/PI) << " m" << endl;
   cout << "Nozzle Exit Ps=           " << nozz.Fl_O.Ps << " psi" << endl;
   cout << "Nozzle Exit Ts=           " << nozz.Fl_O.Ts << " degR" << endl;
   cout << "Nozzle Exit Pt=           " << nozz.Fl_O.Pt << " psi" << endl;
   cout << "Nozzle Exit Tt=           " << nozz.Fl_O.Tt << " degR" << endl;
   cout << "Nozzle MFR=               " << toStr(nozz.Fl_O.W*0.453592,10) << " kg/s" << endl;
   cout << "Nozzle Gross Thrust=      " << nozz.Fg << " lb" << endl;
   cout << "Inlet Ram Drag=           " << inlet.Fram << " lb" << endl;
   cout << "Pod Net Thrust=           " << nozz.Fg - inlet.Fram << " lb" << endl << endl;
}

OutFileStream outF { filename ="wrapper.out"; }

// wrapper CSV header
outF << "nozz.Fg" << endl;

// CSV values
void wrapper_print(){
   outF << toStr(nozz.Fg,10) << endl;
}


cmpMach = 0.65; run(); printStuff(); cout << endl;
wrapper_print();