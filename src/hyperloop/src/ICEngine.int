// ****************************************************************************
// * ASDL 
// * Title: Internal Combustion Engine Tool
// * Author: Ryan Donnan
// *
// ****************************************************************************
class ICEngine extends Element {
	
	//Inputs / Variables / Outputs
	real N 		{ IOstatus = INPUT; units = RPM; 		description = "RPM of engine"; }
	real r_c 	{ IOstatus = INPUT; units = NONE; 		description = "Compression Ratio"; }
	real n_c 	{ IOstatus = INPUT; units = NONE; 		description = "Number of cylinders"; }
	real BL 	{ IOstatus = INPUT; units = NONE; 		description = "Bore to Stroke Ratio"; }
	real B 		{ IOstatus = INPUT; units = "m"; 		description = "Bore"; }
	real L 		{ IOstatus = INPUT; units = "m"; 		description = "Stroke"; }
	real Pratio { IOstatus = INPUT; units = NONE; 		description = "Pressure Ratio Pe/Pi"; }
	real FAR 	{ IOstatus = INPUT; units = NONE; 		description = "Fuel to Air Ratio"; }
	real n_b 	{ IOstatus = INPUT; units = NONE; 		description = "Burner Efficiency"; }
	real V_d 	{ IOstatus = INPUT; units = "m3";		description = "Displacement Volume"; }
	real rhoF 	{ IOstatus = INPUT; units = "kg/m3"; 	description = "Fuel Density"; }
	real q      { IOstatus = INPUT; units = NONE;      description = "Throttle Mass Flow"; value = 1.0;}
	//===== OUTPUTS =====//
	real BMEP 		{ value = 0.0; IOstatus = OUTPUT; units = "kpa"; 			description = "Brake Mean Effective Pressure"; }
	real BSFC 		{ value = 0.0; IOstatus = OUTPUT; units = "lbm/(hr*hp)"; 	description = "Brake Specific Fuel Consumption"; }
	real c 			{ value = 0.0; IOstatus = OUTPUT; units = "m/sec"; 			description = "Average Piston Speed"; }
	real dryWeight 	{ value = 0.0; IOstatus = OUTPUT; units = "lbm"; 			description = "Dry Weight of Engine Based on Design Variables";}
	// real gamma 		{ value = 0.0; IOstatus = OUTPUT; units = NONE;				description = "Specific Heat Ratio"; }
	real ht 		{ value = 0.0; IOstatus = OUTPUT; units = "W/(m2*K)";		description = "Heat Transfer Coefficient"; }
	real IMEP 		{ value = 0.0; IOstatus = OUTPUT; units = "kpa"; 			description = "Indicated Mean Effective Pressure"; }
	real injRate 	{ value = 0.0; IOstatus = OUTPUT; units = "kg"; 			description = "Mass of Fuel Injected Per Stroke (mg)"; }
	real m_cmp 		{ value = 0.0; IOstatus = OUTPUT; units = "kg";				description = "Mass Before Burn"; }
	real m_exp 		{ value = 0.0; IOstatus = OUTPUT; units = "kg";				description = "Mass After Burn"; }
	real P1 		{ value = 0.0; IOstatus = OUTPUT; units = "psia";			description = "Stage 1 Pressure"; }
	real P2 		{ value = 0.0; IOstatus = OUTPUT; units = "kpa";			description = "Stage 2 Pressure"; }
	real P2a 		{ value = 0.0; IOstatus = OUTPUT; units = "kpa";			description = "Stage 2a Pressure"; }
	real P3 		{ value = 0.0; IOstatus = OUTPUT; units = "kpa";			description = "Stage 3 Pressure"; }
	real P4 		{ value = 0.0; IOstatus = OUTPUT; units = "psia";			description = "Stage 4 Pressure"; }
	real P5 		{ value = 0.0; IOstatus = OUTPUT; units = "psia";			description = "Stage 5 Pressure"; }
	real P_amb 		{ value = 0.0; IOstatus = OUTPUT; units = "kpa";			description = "Ambient Pressure"; }
	real P_b 		{ value = 0.0; IOstatus = OUTPUT; units = "hp"; 			description = "Brake Power"; }
	real P_f 		{ value = 0.0; IOstatus = OUTPUT; units = "kW"; 			description = "Friction Power"; }
	real Pcyl 		{ value = 0.0; IOstatus = OUTPUT; units = "kpa";			description = "Pressure Inside Cylinder (HT)"; }
	real Qdot12 	{ value = 0.0; IOstatus = OUTPUT; units = "kW";				description = "Compression Heat Transfer Rate"; }
	real Qdot34 	{ value = 0.0; IOstatus = OUTPUT; units = "kW";				description = "Expansion Heat Transfer Rate"; }
	real R 			{ value = 0.0; IOstatus = OUTPUT; units = "kJ/(kg*K)";		description = "Gas Constant"; }
	real rho1 		{ value = 0.0; IOstatus = OUTPUT; units = "kg/m3";			description = "Stage 1 Density"; }
	real rho2 		{ value = 0.0; IOstatus = OUTPUT; units = "kg/m3";			description = "Stage 2 Density"; }
	// real rho2a 		{ value = 0.0; IOstatus = OUTPUT; units = "kg/m3";			description = "Stage 2a Density"; }
	real rho3 		{ value = 0.0; IOstatus = OUTPUT; units = "kg/m3";			description = "Stage 3 Density"; }
	// real rho4 		{ value = 0.0; IOstatus = OUTPUT; units = "kg/m3";			description = "Stage 4 Density"; }
	real rho5 		{ value = 0.0; IOstatus = OUTPUT; units = "kg/m3";			description = "Stage 5 Density"; }
	// real s1 		{ value = 0.0; IOstatus = OUTPUT; units = "kJ/(kg*K)";		description = "Stage 1 Entropy"; }
	// real s2 		{ value = 0.0; IOstatus = OUTPUT; units = "kJ/(kg*K)";		description = "Stage 2 Entropy"; }
	// real s2a 		{ value = 0.0; IOstatus = OUTPUT; units = "kJ/(kg*K)";		description = "Stage 2a Entropy"; }
	// real s3 		{ value = 0.0; IOstatus = OUTPUT; units = "kJ/(kg*K)";		description = "Stage 3 Entropy"; }
	// real s4 		{ value = 0.0; IOstatus = OUTPUT; units = "kJ/(kg*K)";		description = "Stage 4 Entropy"; }
	// real s5 		{ value = 0.0; IOstatus = OUTPUT; units = "kJ/(kg*K)";		description = "Stage 5 Entropy"; }
	real t 			{ value = 0.0; IOstatus = OUTPUT; units = "sec";			description = "Time Elapsed During Stroke"; }
	real T1 		{ value = 0.0; IOstatus = OUTPUT; units = "R";				description = "Stage 1 Temperature"; }
	// real T2 		{ value = 0.0; IOstatus = OUTPUT; units = "K";				description = "Stage 2 Temperature"; }
	real T2a 		{ value = 0.0; IOstatus = OUTPUT; units = "K";				description = "Stage 2a Temperature"; }
	real T3 		{ value = 0.0; IOstatus = OUTPUT; units = "K";				description = "Stage 3 Temperature"; }
	real T4 		{ value = 0.0; IOstatus = OUTPUT; units = "R";				description = "Stage 4 Temperature"; }
	// real T5 		{ value = 0.0; IOstatus = OUTPUT; units = "K";				description = "Stage 5 Temperature"; }
	real Tcyl 		{ value = 0.0; IOstatus = OUTPUT; units = "K";				description = "Temperature Inside Cylinder (HT)"; }
	real TFMEP 		{ value = 0.0; IOstatus = OUTPUT; units = "kpa"; 			description = "Friction Effective Pressure"; }
	real T_i 		{ value = 0.0; IOstatus = OUTPUT; units = "R";				description = "Inlet Temperature"; }
	real Torque 	{ value = 0.0; IOstatus = OUTPUT; units = "ft*lbf"; 		description = "Torque"; }
	real Twall 		{ value = 0.0; IOstatus = OUTPUT; units = "K";				description = "Wall Temperature"; }
	real u1 		{ value = 0.0; IOstatus = OUTPUT; units = "kJ/kg";			description = "Stage 1 Specific Internal Energy"; }
	real u2 		{ value = 0.0; IOstatus = OUTPUT; units = "kJ/kg";			description = "Stage 2 Specific Internal Energy"; }
	real u2a 		{ value = 0.0; IOstatus = OUTPUT; units = "kJ/kg";			description = "Stage 2a Specific Internal Energy"; }
	real u3 		{ value = 0.0; IOstatus = OUTPUT; units = "kJ/kg";			description = "Stage 3 Specific Internal Energy"; }
	real u4 		{ value = 0.0; IOstatus = OUTPUT; units = "kJ/kg";			description = "Stage 4 Specific Internal Energy"; }
	real u5 		{ value = 0.0; IOstatus = OUTPUT; units = "kJ/kg";			description = "Stage 5 Specific Internal Energy"; }
	real v1 		{ value = 0.0; IOstatus = OUTPUT; units = NONE;				description = "Stage 1 Specific Volume"; }
	real v2 		{ value = 0.0; IOstatus = OUTPUT; units = NONE;				description = "Stage 2 Specific Volume"; }
	real v3 		{ value = 0.0; IOstatus = OUTPUT; units = NONE;				description = "Stage 3 Specific Volume"; }
	real v5 		{ value = 0.0; IOstatus = OUTPUT; units = NONE;				description = "Stage 5 Specific Volume"; }
	real V_max 		{ value = 0.0; IOstatus = OUTPUT; units = "m3";				description = "Maximum Volume"; }
	real V_min 		{ value = 0.0; IOstatus = OUTPUT; units = "m3";				description = "Minimum Volume"; }
	real w_cmp 		{ value = 0.0; IOstatus = OUTPUT; units = "kJ/kg";			description = "Compression Specific Work"; }
	real w_exp 		{ value = 0.0; IOstatus = OUTPUT; units = "kJ/kg";			description = "Expansion Specific Work"; }
	real W_net 		{ value = 0.0; IOstatus = OUTPUT; units = "kJ";				description = "Net Work Per Cycle"; }
	real xb_calc 	{ value = 0.0; IOstatus = OUTPUT; units = NONE; 			description = "Calculated Burn Fraction"; }
	real xb_error 	{ value = 1.0; IOstatus = OUTPUT; units = NONE; 			description = "Error"; }
	real n_v 		{ value = 1.0; IOstatus = OUTPUT; units = NONE;				description = "Volumetric efficiency of the intake";}
	real EGT;
	
	//Sockets
  Socket S_Friction {
    allowedValues = { "Ploss" };
    description = "Power loss socket due to friction";
    socketType = ADIAB_DPNORM;  // 
  }
	
	//Options
  Option switchDes {
    allowedValues = { "OFFDESIGN", "DESIGN" }
    IOstatus = INPUT;
    description = "Design mode switch indicator [ OFFDESIGN / DESIGN ]";
    trigger = TRUE;
    rewritableValues = FALSE;
  }
	
  Option engineType {
    allowedValues = { "SI", "CI" } 
    description = "Engine Switch. Spark Ignition (SI) or Compression Ignition (CI)";
    // trigger = TRUE;
    // rewritableValues = FALSE;
  }

  Option printStates {
    allowedValues = { "OFF", "ON" } 
    description = "Option for printing state values in Command Prompt";
  }

  //Flowstations
  FluidInputPort Fl_I {
    description = "Inlet fluid port";
  }
  
  FlowStation Fl_1 {
    description = "Flow station for intake stroke";
  }
  
  FlowStation Fl_2 {
    description = "Flow station for compression stroke";
  }  
  
  FlowStation Fl_3 {
    description = "Flow station for combustion";
  } 
  
  FlowStation Fl_4 {
    description = "Flow station for expansion stroke";
  }
  
  FlowStation Fl_5 {
    description = "Flow station for exhaust stroke";
  }
  
  FuelInputPort Fu_I {
    description = "Incoming fuel flow";
  } 
  
	void variableChanged(string name, any oldVal) {
		if ( name == "switchDes"){
			//Set IOstatus of variables for DESIGN and OFFDESIGN
			if (switchDes == DESIGN){
				P_b.IOstatus = INPUT;
				V_d.IOstatus = OUTPUT;
				B.IOstatus = OUTPUT;
				L.IOstatus = OUTPUT;
			}
			else if (switchDes == OFFDESIGN) {
				P_b.IOstatus = OUTPUT;
				V_d.IOstatus = INPUT;
				B.IOstatus = INPUT;
				L.IOstatus = INPUT;
			}
		}
	} // end void variableChanged(string name, any oldVal)

  
  void calculate() {
	//===== Initialize Variables =====//
	if (switchDes == "DESIGN") {
		L = B/BL; 
		V_d = PI*B**2.0*L/4.0;
	}
	real x_b= 0.029;
	xb_error= 1.0;
	P_amb 	= Fl_I.Pt "psia";
	T_i 	= Fl_I.Tt "R";		
	V_min 	= V_d/(r_c-1.0);
	V_max 	= V_min + V_d;
	Fl_I.setTotalTP(T_i, Fl_I.Pt);																	// STATE 0
	
	//===== Run WHILE loop until x_b converges ====//
	while ( abs(xb_error) > 0.001 ) {		// NEED TO LEARN HOW TO RESET FLOWSTATIONS (variables)
		
		//===== Find rho1 for mass flow calculation =====//
		Fl_1.copyFlowStatic("Fl_I");
		real gamma 	= Fl_I.gamt;
		T1.units = "R"; 	T1.value = (1.0-x_b)/(1.0-1.0/(r_c*gamma)*(Pratio+gamma-1.0))*T_i;	// Highley
		P1.units = "psia"; 	P1.value = Fl_I.Pt;													// Assume P1 = Pamb
		Fl_1.setTotalTP(T1, P1);
		rho1 = Fl_1.rhot "lbm/ft3";
		
		//===== Adjust flow rates and re-analyse to find State 1 ======//
		Fl_I.W = n_v * V_max * rho1 * N/2.0/60.0 "kg/sec";  //Wide-open Throttle Mass Flow
		if(switchDes == "OFFDESIGN"){  //reduce density/pressure in off-design for throttle factor
			Fl_I.W = q * Fl_I.W;  //Throttle the flow
		} 
		rho1 = Fl_I.W/(V_max / 0.0283168)/N*120. "lbm/ft3";  //recalculate density  
		rho1.units = "lbm/ft3"; rho1.value = rho1 "kg/m3";
		Fl_1.setTotal_u_rho(Fl_1.ut, rho1);
		Fu_I.Wfuel 	= Fl_I.W*FAR;
		gamma 		= Fl_I.gamt;
		T1 			= (1.0-x_b)/(1.0-1.0/(r_c*gamma)*(Pratio+gamma-1.0))*T_i;
		P1 			= Fl_1.Pt;
		Fl_1.copyFlowStatic("Fl_I");
		Fl_1.setTotalTP(T1, P1);																		// STATE 1
		T1.units 	= "K"; 		T1.value = Fl_1.Tt "R";
		P1.units 	= "kpa"; 	P1.value = Fl_1.Pt "psia";
		rho1.units = "kg/m3";   rho1.value = Fl_1.rhot "lbm/ft3";
		m_cmp 		= rho1*V_max*n_v;
		R 			= Fl_1.Rt "Btu/(lbm*R)";
		u1 = Fl_1.ut "BTU/lbm";
		real s1 	{ units = "kJ/(kg*K)"; 	value = Fl_1.S "Btu/(lbm*R)"; }
		v1 			= R*T1/P1; 								// m3/kg
		
		//===== Calculate pressure and temperature change to find State 2 =====//
		Fl_2.copyFlowStatic("Fl_1");
		v2 		= v1/r_c;
		gamma 	= Fl_1.gamt;
		real T2	{ units = "K"; 		value = T1*r_c**(gamma-1.); }	// (Decher, Ganeson)
		P2 = P1*r_c**gamma;		// from ideal gas (Highley)
		P2.units = "psia"; 	P2.value = P2 "kpa";
		T2.units = "R"; 	T2.value = T2 "K";
		Fl_2.setTotalSP(Fl_1.S, P2);																	// STATE 2
		T2.units = "K"; 	T2.value = Fl_2.Tt "R";
		P2.units = "kpa"; 	P2.value = Fl_2.Pt "psia";
		rho2 = Fl_2.rhot "lbm/ft3";
		real s2 	{ units = "kJ/(kg*K)"; 	value = Fl_2.S "Btu/(lbm*R)"; }
		u2 = Fl_2.ut "BTU/lbm";
		
		//===== NPSS burn function =====//
		Fl_3.copyFlowStatic("Fl_2");
		Fl_3.burn("Fu_I", n_b);																			// STATE 3 (CI)
		FAR = Fl_3.FAR;
		rho3 = 1.0/((1.0/rho2 + FAR/rhoF)/(1.0+FAR));
		
		//===== Account for constant volume burn if SI engine =====//
		if ( engineType == "SI" ) {
			//===== Calculate density of fuel-air mixture =====//
			T2a = Fl_3.Tt "R";
			P2a 	= Fl_3.Pt "psia";
			u2a = Fl_3.ut "Btu/lbm";
			real rho2a 	{ units = "kg/m3"; 		value = Fl_3.rhot "lbm/ft3"; }
			real s2a 	{ units = "kJ/(kg*K)"; 	value = Fl_3.S "Btu/(lbm*R)"; }
			
			//===== Use u2a and rho3 to find State 3 =====//
			rho3.units = "lbm/ft3"; rho3.value = rho3 "kg/m3";
			Fl_3.setTotal_u_rho(Fl_3.ut, rho3);															// STATE 3 (SI)
			rho3.units = "kg/m3"; rho3.value = rho3 "lbm/ft3";
		}
		m_exp 	= rho3*V_min;
		T3 = Fl_3.Tt "R";
		P3 = Fl_3.Pt "psia";
		u3 = Fl_3.ut "Btu/lbm";
		real s3 { units = "kJ/(kg*K)"; 	value = Fl_3.S "Btu/(lbm*R)"; }
		v3 		= 1.0/rho3;
		
		//===== Find pressure and temperature changes to calculate State 4 =====//
		Fl_4.copyFlowStatic("Fl_3");
		gamma 		= Fl_3.gamt;
		P4.units = "psia"; 	P4.value = P3*(1.0/r_c)**gamma "kpa";
		T4.units = "R"; 	T4.value = T3*(1.0/r_c)**(gamma-1.0) "K";
		Fl_4.setTotalSP(Fl_3.S, P4);																	// STATE 4
		T4.units = "K"; 	T4 = Fl_4.Tt "R";
		P4.units = "kpa"; 	P4 = Fl_4.Pt "psia";
		real rho4 	{ units = "kg/m3"; 		value = Fl_4.rhot "lbm/ft3"; }
		u4 = Fl_4.ut "Btu/lbm";
		real s4 	{ units = "kJ/(kg*K)"; 	value = Fl_4.S "Btu/(lbm*R)"; }
		
		//===== Determine exhaust state assuming isentropic expansion =====//
		Fl_5.copyFlowStatic("Fl_4");
		gamma 		= Fl_4.gamt;
		P5.units 	= "psia"; P5.value	= P_amb "kpa";	// Assume exit pressure = ambient
		Fl_5.setTotalSP(Fl_4.S, P5);																	// STATE 5
		real T5 	{ units = "K"; 			value = Fl_5.Tt "R"; }
		rho5 		= Fl_5.rhot "lbm/ft3";
		u5 			= Fl_5.ut "Btu/lbm";
		real s5 	{ units = "kJ/(kg*K)"; 	value = Fl_5.S "Btu/(lbm*R)"; }
		v5 			= 1.0/rho5;
		P5.units 	= "kpa"; P5 = Fl_5.Pt "psia";
		
		//===== Calculate new burn fraction =====//
		xb_calc 	= v3/v5;
		xb_error 	= x_b - xb_calc;
		x_b 		= xb_calc;
		}
		
	//==== Performance calculations (Highley) ====//
	w_cmp 	= u1 - u2;
	w_exp 	= u3 - u4;
	injRate = (m_exp-m_cmp)/4.0*1000.0*1000.0;
	c 		= L*N/30.0; 	// Rakopoulos
	W_net 	= w_exp*m_exp + w_cmp*m_cmp;	// Modified Highley's equation to account for unequal mass
	IMEP 	= W_net/(V_max-V_min);
	// TFMEP 	= 0.0;
	TFMEP 	= (13.7 + 0.005*P3 + 16.2*c)*1.45; 	// Rakopoulos (S. K. Chen and P. Flynn, Development of a compression ignition research engine. SAE Paper No. 650733 (1965).)
	BMEP 	= IMEP - TFMEP;
	P_b 	= BMEP*V_d*n_c*N/60.0/2.0 "kW";
	BSFC 	= Fu_I.Wfuel*n_c/P_b*3600.0;
	Torque 	= P_b/N*5252.0;
	EGT = T5;
	if (switchDes == "DESIGN") {
		dryWeight = 801.07 + 0.94546*P_b + 21.619*n_c + 13510.0*B - 8991.0*L - 1043.8*BL - 147600.0*V_d - 10.039*r_c
					+ (n_c - 4.6667)**(2.0)*1.0262 + (L - 0.10194)**(2.0)*91527.0 - (P_b - 152.56)**(2.0)*0.00025390; }
	
	//===== Print States =====//
	if ( printStates == "ON" ) {
		cout << "====Station 1 Data====" << endl;
		cout << "T1     = " << T1 		<< "  " << T1.units << "         Highley: 342.38 K" << endl;
		cout << "P1     = " << P1 		<< "  " << P1.units << "       Highley: 101.33 kPa" << endl;
		cout << "v1     = " << v1 		<< " " 	<< "m3/kg" 	<< "     Highley: 0.9788 m3/kg" << endl;
		cout << "1/rho1 = " << 1.0/rho1 << "  " << "m3/kg" 	<< endl;
		cout << "u1     = " << u1  		<< "  " << u1.units << "     Highley: -2946.5 kJ/kg " << endl;
		cout << "s1     = " << s1  		<< "  " << s1.units << " Highley: 7.13 kJ/(kg*K) " << endl;
		cout << endl << endl;
		cout << "====Station 2 State Data====" << endl;
		cout << "T2     = " << T2 		<< "  " << T2.units << "         Highley: 719.3 K" << endl;
		cout << "P2     = " << P2 		<< "  " << P2.units << "        Highley: 1809.4 kPa" << endl;
		cout << "v2     = " << v2 		<< " " 	<< "m3/kg" 	<< "       Highley: 0.1151 m3/kg" << endl;
		cout << "1/rho2 = " << 1.0/rho2 << " " 	<< "m3/kg" 	<< endl;
		cout << "u2     = " << u2  		<< "  " << u2.units << "     Highley: -2629.2 kJ/kg " << endl;
		cout << "s2     = " << s2  		<< "  " << s2.units << " Highley: 7.13 kJ/(kg*K) " << endl;
		cout << endl << endl;
		if ( engineType == "SI" ) {
			cout << "====Station 2a Data====" << endl;
			cout << "T2a    = " << T2a 		<< "  " << T2a.units 	<< endl;
			cout << "P2a    = " << P2a 		<< "  " << P2a.units 	<< endl;
			cout << "v2a    = " << 1.0/rho2a << " " << "m3/kg" 		<< endl;
			cout << "u2a    = " << u2a 		<< "  " << u2a.units 	<< endl;
			cout << "s2a    = " << s2a  	<< "  " << s2a.units 	<< endl;
			cout << endl << endl;
		}
		cout << "===== Station 3 Data =====" << endl;
		cout << "T3     = " << T3 << " " << T3.units 	<< "         Highley: 2997.54 K" 	<< endl;
		cout << "P3     = " << P3 << " " << P3.units 	<< "       Highley: 7720.3 kPa" 	<< endl;
		cout << "v3     = " << v3 << " " << "m3/kg" 	<< "     Highley: 0.1151 m3/kg" 	<< endl;
		cout << "u3     = " << u3 << " " << u3.units 	<< "     Highley: 351.99 kJ/kg " 	<< endl;
		cout << "s3     = " << s3 << " " << s3.units 	<< " Highley: 8.83 kJ/(kg*K) " 		<< endl;
		cout << endl << endl;
		cout << "===== Station 4 Data =====" << endl;
		cout << "T4     = " << T4 		<< " " << T4.units 	<< "         Highley: 2028.58 K" << endl;
		cout << "P4     = " << P4 		<< " " << P4.units 	<< "       Highley: 601.36 kPa" << endl;
		cout << "v4     = " << 1.0/rho4 << " " << "m3/kg" 	<< "    Highley: 0.9788 m3/kg" << endl;
		cout << "u4     = " << u4  		<< " " << u4.units 	<< "     Highley: -1222.13 kJ/kg " << endl;
		cout << "s4     = " << s4  		<< " " << s4.units 	<< " Highley: 8.83 kJ/(kg*K) " << endl;
		cout << endl << endl;
		cout << "===== Station 5 Data =====" << endl;
		cout << "T5     = " << T5 	<< " " << T5.units 	<< "         Highley: 1421.34 K" 	<< endl;
		cout << "P5     = " << P5 	<< " " << P5.units 	<< "       Highley: 101.32 kPa" 	<< endl;
		cout << "v5     = " << v5 	<< " " << "m3/kg" 	<< "     Highley: 4.0632 m3/kg" 	<< endl;
		cout << "u5     = " << u5  	<< " " << u5.units 	<< "     Highley: -1930.10 kJ/kg " 	<< endl;
		cout << "s5     = " << s5  	<< " " << s5.units 	<< " Highley: 8.83 kJ/(kg*K) " 		<< endl;
		cout << "x_b    = " << x_b  << " " << endl;
		cout << endl << endl;
		cout << "==== Performance ====" << endl;
		cout << "w_cmp = " << w_cmp 	<< " " << w_cmp.units 		<< "        Highley: 317.3 kJ/kg" 		<< endl;
		cout << "w_exp = " << w_exp 	<< " " << w_exp.units 		<< "        Highley: 1574.12 kJ/kg" 	<< endl;
		cout << "W_net = " << W_net 	<< " " << W_net.units 		<< "          Highley: 1256.82 kJ/kg" 	<< endl;
		cout << "IMEP  = " << IMEP 		<< " " << IMEP.units 		<< "          Highley: 1455.31 kPa" 	<< endl;
		cout << "TFMEP = " << TFMEP*n_c << " " << TFMEP.units 		<< "          Highley: 474.36 kPa" 		<< endl;
		cout << "BMEP  = " << BMEP*n_c 	<< " " << BMEP.units 		<< "          Highley: 4150.6 kPa" 		<< endl;
		cout << "P_b   = " << P_b 		<< " " << P_b.units 		<< "           Highley: 25.31 HP" 		<< endl;
		cout << "Wfuel = " << Fu_I.Wfuel<< " " << Fu_I.Wfuel.units 	<<endl;
		cout << "BSFC  = " << BSFC 		<< " " << BSFC.units 		<< " Highley: 0.3198 lbm/(HP*hr)" 	<< endl << endl;
		
		cout << "injRate  = " << injRate 		<< " " << "mg/stroke" 		<< " " 	<< endl;
		cout << "IMEP_bar  = " << IMEP_bar 		<< " " << IMEP_bar.units 		<< " " 	<< endl;
	}
	
  }
}