/* ******************************************************
*  File Name: BatteryPerf.int                           *
*  Date: September 6, 2012                              *
*  Created by: Andrew Urcinas                           *
*  Last Edited: September 02, 2015                       *
*  By: Manish Pokhrel                                    *
*  For: Aerospace Systems Design Lab @ Georgia Tech     *
*******************************************************	*/

/* ******************************************************
*  Functions:                                           *
*	Battery     class                                   *
*******************************************************	*/


// ==============================================================================
// Battery (class)
// Allows stand-alone batteries to be simulated without an electric circuit within NPSS 
// for use in validating the procedure. 
// ------------------------------------------------------------------------------

class BatteryPerf extends Element{
real Ncells {
	value = 1; IOstatus = INPUT;// units = Cells;
	description = "Number of cells in the battery Stack";
}
real Nparallel {
	value = 1; IOstatus = INPUT;// units = Cells;
	description = "Number of cells in parallel in the battery stack";
}
real Exp_zone_amp {
	value = 1; IOstatus = INPUT;// units = Volts;
	description = "Voltage lost over the exponential zone of battery";// A in modeling plan
}
real Exp_zone_time_const {
	value = 1; IOstatus = INPUT;// units = Amp-hours^-1;
	description = "Time constant for exponential zone of discharge curve";// B in modeling plan
}
real Polarization_voltage {
	value = 1; IOstatus = INPUT;// units = Volts;
	description = "Voltage lost due to polarization";// K in modeling plan
}
real Capacity {
	value = 12.5; IOstatus = INPUT;// units = Amp-hours
	description = "Nominal capacity of one cell";
}
real No_load_voltage {
	value = 1.28; IOstatus = INPUT;// units = Volts
	description = "No-load constant voltage of the battery";// E_0 in modeling plan
}
real Resistance {
	value = 0.0046; IOstatus = INPUT;// units = Ohms;
	description = "Internal resistance of one cell";
}
real State_of_charge {
	value = 100; IOstatus = INPUT;// units = percentage;
	description = "Percent of charge left in battery";
}
real Old_State_of_charge {
	value = 100; IOstatus = INPUT;// units = percentage;
	description = "Percent of charge left in battery";
}
real Current {
	value = 1000; IOstatus = INPUT;// units = Amps
	description = "Current drain applied to the battery";
}
real Voltage {
	value = 1; IOstatus = OUTPUT;// units = Volts
	description = "Voltage output of battery based on current draw";
}
real timeStep {
	value = 0.05; IOstatus = INPUT;// units = minutes
	description = "Time step for model";
	}

	

DataOutputPort OUTPUT;
real output[4];

Independent ind_Current {
     varName = "Current";
	 autoSetup = TRUE;
  }
void calculate()
{
  real Capacity_1;
real CurrBatt;
real VoltageBatt;
CurrBatt = Current/Nparallel;
Capacity_1 = Old_State_of_charge / 100 * Capacity; // Capacity remaining in series
VoltageBatt = No_load_voltage - Polarization_voltage * (Capacity/Capacity_1) + Exp_zone_amp*E**(-Exp_zone_time_const*(Capacity - Capacity_1)) - Resistance*CurrBatt;
State_of_charge = (Capacity_1 - timeStep/60*CurrBatt)/Capacity*100;
Voltage = Ncells/Nparallel*VoltageBatt;
output[0] = Voltage;
output[1] = Current;
output[2] = 0;
output[3] = 0;
OUTPUT.val = output;
}
}